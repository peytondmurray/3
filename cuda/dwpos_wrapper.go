package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
)

// CUDA handle for dwPos kernel
var dwPos_code cu.Function

// Stores the arguments for dwPos kernel invocation
type dwPos_args_t struct{
	 arg_pos unsafe.Pointer
	 arg_mz unsafe.Pointer
	 arg_Nx int
	 arg_Ny int
	 arg_Nz int
	 argptr [5]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for dwPos kernel invocation
var dwPos_args dwPos_args_t

func init(){
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	 dwPos_args.argptr[0] = unsafe.Pointer(&dwPos_args.arg_pos)
	 dwPos_args.argptr[1] = unsafe.Pointer(&dwPos_args.arg_mz)
	 dwPos_args.argptr[2] = unsafe.Pointer(&dwPos_args.arg_Nx)
	 dwPos_args.argptr[3] = unsafe.Pointer(&dwPos_args.arg_Ny)
	 dwPos_args.argptr[4] = unsafe.Pointer(&dwPos_args.arg_Nz)
	 }

// Wrapper for dwPos CUDA kernel, asynchronous.
func k_dwPos_async ( pos unsafe.Pointer, mz unsafe.Pointer, Nx int, Ny int, Nz int,  cfg *config) {
	if Synchronous{ // debug
		Sync()
		timer.Start("dwPos")
	}

	dwPos_args.Lock()
	defer dwPos_args.Unlock()

	if dwPos_code == 0{
		dwPos_code = fatbinLoad(dwPos_map, "dwPos")
	}

	 dwPos_args.arg_pos = pos
	 dwPos_args.arg_mz = mz
	 dwPos_args.arg_Nx = Nx
	 dwPos_args.arg_Ny = Ny
	 dwPos_args.arg_Nz = Nz
	

	args := dwPos_args.argptr[:]
	cu.LaunchKernel(dwPos_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous{ // debug
		Sync()
		timer.Stop("dwPos")
	}
}

// maps compute capability on PTX code for dwPos kernel.
var dwPos_map = map[int]string{ 0: "" ,
30: dwPos_ptx_30 ,
35: dwPos_ptx_35 ,
37: dwPos_ptx_37 ,
50: dwPos_ptx_50 ,
52: dwPos_ptx_52 ,
53: dwPos_ptx_53 ,
60: dwPos_ptx_60 ,
61: dwPos_ptx_61 ,
70: dwPos_ptx_70 ,
75: dwPos_ptx_75  }

// dwPos PTX code for various compute capabilities.
const(
  dwPos_ptx_30 = `
.version 6.4
.target sm_30
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.f32 	%f4, [%rd6+-8];
	ld.global.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
   dwPos_ptx_35 = `
.version 6.4
.target sm_35
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+-8];
	ld.global.nc.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
   dwPos_ptx_37 = `
.version 6.4
.target sm_37
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+-8];
	ld.global.nc.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
   dwPos_ptx_50 = `
.version 6.4
.target sm_50
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+-8];
	ld.global.nc.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
   dwPos_ptx_52 = `
.version 6.4
.target sm_52
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+-8];
	ld.global.nc.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
   dwPos_ptx_53 = `
.version 6.4
.target sm_53
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+-8];
	ld.global.nc.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
   dwPos_ptx_60 = `
.version 6.4
.target sm_60
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+-8];
	ld.global.nc.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
   dwPos_ptx_61 = `
.version 6.4
.target sm_61
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+-8];
	ld.global.nc.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
   dwPos_ptx_70 = `
.version 6.4
.target sm_70
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+-8];
	ld.global.nc.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
   dwPos_ptx_75 = `
.version 6.4
.target sm_75
.address_size 64

	// .globl	dwPos

.visible .entry dwPos(
	.param .u64 dwPos_param_0,
	.param .u64 dwPos_param_1,
	.param .u32 dwPos_param_2,
	.param .u32 dwPos_param_3,
	.param .u32 dwPos_param_4
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<8>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd3, [dwPos_param_0];
	ld.param.u64 	%rd4, [dwPos_param_1];
	ld.param.u32 	%r22, [dwPos_param_2];
	ld.param.u32 	%r8, [dwPos_param_3];
	ld.param.u32 	%r9, [dwPos_param_4];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r13, %r10, %r11, %r12;
	mov.u32 	%r14, %ntid.y;
	mov.u32 	%r15, %ctaid.y;
	mov.u32 	%r16, %tid.y;
	mad.lo.s32 	%r1, %r14, %r15, %r16;
	mov.u32 	%r17, %ntid.z;
	mov.u32 	%r18, %ctaid.z;
	mov.u32 	%r19, %tid.z;
	mad.lo.s32 	%r2, %r17, %r18, %r19;
	setp.gt.s32	%p1, %r13, 0;
	setp.ge.s32	%p2, %r1, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r2, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_6;

	cvta.to.global.u64 	%rd1, %rd3;
	cvta.to.global.u64 	%rd2, %rd4;
	mad.lo.s32 	%r3, %r2, %r8, %r1;
	mul.lo.s32 	%r4, %r3, %r22;

BB0_2:
	mov.u32 	%r5, %r22;
	add.s32 	%r22, %r5, -1;
	mov.f32 	%f7, 0fBF800000;
	setp.lt.s32	%p6, %r22, 2;
	@%p6 bra 	BB0_5;

	add.s32 	%r20, %r5, %r4;
	mul.wide.s32 	%rd5, %r20, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.nc.f32 	%f4, [%rd6+-8];
	ld.global.nc.f32 	%f5, [%rd6+-4];
	mul.f32 	%f6, %f5, %f4;
	setp.geu.f32	%p7, %f6, 0f00000000;
	@%p7 bra 	BB0_2;

	add.s32 	%r21, %r5, -2;
	cvt.rn.f32.s32	%f7, %r21;

BB0_5:
	mul.wide.s32 	%rd7, %r3, 4;
	add.s64 	%rd8, %rd1, %rd7;
	st.global.f32 	[%rd8], %f7;

BB0_6:
	ret;
}


`
 )

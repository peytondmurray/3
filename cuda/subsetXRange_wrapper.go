package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import(
	"unsafe"
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
)

// CUDA handle for subsetXRange kernel
var subsetXRange_code cu.Function

// Stores the arguments for subsetXRange kernel invocation
type subsetXRange_args_t struct{
	 arg_dst unsafe.Pointer
	 arg_src unsafe.Pointer
	 arg_xmin int
	 arg_xmax int
	 arg_Nx int
	 arg_Ny int
	 arg_Nz int
	 argptr [7]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for subsetXRange kernel invocation
var subsetXRange_args subsetXRange_args_t

func init(){
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	 subsetXRange_args.argptr[0] = unsafe.Pointer(&subsetXRange_args.arg_dst)
	 subsetXRange_args.argptr[1] = unsafe.Pointer(&subsetXRange_args.arg_src)
	 subsetXRange_args.argptr[2] = unsafe.Pointer(&subsetXRange_args.arg_xmin)
	 subsetXRange_args.argptr[3] = unsafe.Pointer(&subsetXRange_args.arg_xmax)
	 subsetXRange_args.argptr[4] = unsafe.Pointer(&subsetXRange_args.arg_Nx)
	 subsetXRange_args.argptr[5] = unsafe.Pointer(&subsetXRange_args.arg_Ny)
	 subsetXRange_args.argptr[6] = unsafe.Pointer(&subsetXRange_args.arg_Nz)
	 }

// Wrapper for subsetXRange CUDA kernel, asynchronous.
func k_subsetXRange_async ( dst unsafe.Pointer, src unsafe.Pointer, xmin int, xmax int, Nx int, Ny int, Nz int,  cfg *config) {
	if Synchronous{ // debug
		Sync()
		timer.Start("subsetXRange")
	}

	subsetXRange_args.Lock()
	defer subsetXRange_args.Unlock()

	if subsetXRange_code == 0{
		subsetXRange_code = fatbinLoad(subsetXRange_map, "subsetXRange")
	}

	 subsetXRange_args.arg_dst = dst
	 subsetXRange_args.arg_src = src
	 subsetXRange_args.arg_xmin = xmin
	 subsetXRange_args.arg_xmax = xmax
	 subsetXRange_args.arg_Nx = Nx
	 subsetXRange_args.arg_Ny = Ny
	 subsetXRange_args.arg_Nz = Nz
	

	args := subsetXRange_args.argptr[:]
	cu.LaunchKernel(subsetXRange_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous{ // debug
		Sync()
		timer.Stop("subsetXRange")
	}
}

// maps compute capability on PTX code for subsetXRange kernel.
var subsetXRange_map = map[int]string{ 0: "" ,
30: subsetXRange_ptx_30 ,
35: subsetXRange_ptx_35 ,
37: subsetXRange_ptx_37 ,
50: subsetXRange_ptx_50 ,
52: subsetXRange_ptx_52 ,
53: subsetXRange_ptx_53 ,
60: subsetXRange_ptx_60 ,
61: subsetXRange_ptx_61 ,
70: subsetXRange_ptx_70 ,
75: subsetXRange_ptx_75  }

// subsetXRange PTX code for various compute capabilities.
const(
  subsetXRange_ptx_30 = `
.version 6.4
.target sm_30
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
   subsetXRange_ptx_35 = `
.version 6.4
.target sm_35
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
   subsetXRange_ptx_37 = `
.version 6.4
.target sm_37
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
   subsetXRange_ptx_50 = `
.version 6.4
.target sm_50
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
   subsetXRange_ptx_52 = `
.version 6.4
.target sm_52
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
   subsetXRange_ptx_53 = `
.version 6.4
.target sm_53
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
   subsetXRange_ptx_60 = `
.version 6.4
.target sm_60
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
   subsetXRange_ptx_61 = `
.version 6.4
.target sm_61
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
   subsetXRange_ptx_70 = `
.version 6.4
.target sm_70
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
   subsetXRange_ptx_75 = `
.version 6.4
.target sm_75
.address_size 64

	// .globl	subsetXRange

.visible .entry subsetXRange(
	.param .u64 subsetXRange_param_0,
	.param .u64 subsetXRange_param_1,
	.param .u32 subsetXRange_param_2,
	.param .u32 subsetXRange_param_3,
	.param .u32 subsetXRange_param_4,
	.param .u32 subsetXRange_param_5,
	.param .u32 subsetXRange_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [subsetXRange_param_0];
	ld.param.u64 	%rd2, [subsetXRange_param_1];
	ld.param.u32 	%r5, [subsetXRange_param_2];
	ld.param.u32 	%r8, [subsetXRange_param_3];
	ld.param.u32 	%r6, [subsetXRange_param_4];
	ld.param.u32 	%r7, [subsetXRange_param_5];
	ld.param.u32 	%r9, [subsetXRange_param_6];
	mov.u32 	%r10, %ctaid.x;
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r13, %r14, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r16, %r17, %r18;
	setp.ge.s32	%p1, %r2, %r7;
	sub.s32 	%r4, %r8, %r5;
	setp.ge.s32	%p2, %r1, %r4;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mad.lo.s32 	%r19, %r3, %r7, %r2;
	add.s32 	%r20, %r1, %r5;
	mad.lo.s32 	%r21, %r19, %r6, %r20;
	mul.wide.s32 	%rd4, %r21, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.nc.f32 	%f1, [%rd5];
	mad.lo.s32 	%r22, %r19, %r4, %r1;
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r22, 4;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.f32 	[%rd8], %f1;

BB0_2:
	ret;
}


`
 )
